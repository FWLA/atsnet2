<?php

namespace Proxies\__CG__\Atemschutz\NachweisBundle\Entity;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class Atemschutzgeraetetraeger extends \Atemschutz\NachweisBundle\Entity\Atemschutzgeraetetraeger implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    /** @private */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int) $this->_identifier["id"];
        }
        $this->__load();
        return parent::getId();
    }

    public function setFirstname($firstname)
    {
        $this->__load();
        return parent::setFirstname($firstname);
    }

    public function getFirstname()
    {
        $this->__load();
        return parent::getFirstname();
    }

    public function setLastname($lastname)
    {
        $this->__load();
        return parent::setLastname($lastname);
    }

    public function getLastname()
    {
        $this->__load();
        return parent::getLastname();
    }

    public function setBirthdate($birthdate)
    {
        $this->__load();
        return parent::setBirthdate($birthdate);
    }

    public function getBirthdate()
    {
        $this->__load();
        return parent::getBirthdate();
    }

    public function setAts1($ats1)
    {
        $this->__load();
        return parent::setAts1($ats1);
    }

    public function getAts1()
    {
        $this->__load();
        return parent::getAts1();
    }

    public function setAts2($ats2)
    {
        $this->__load();
        return parent::setAts2($ats2);
    }

    public function getAts2()
    {
        $this->__load();
        return parent::getAts2();
    }

    public function setIsActive($isActive)
    {
        $this->__load();
        return parent::setIsActive($isActive);
    }

    public function getIsActive()
    {
        $this->__load();
        return parent::getIsActive();
    }

    public function setOrganisation(\Atemschutz\CoreBundle\Entity\Organisation $organisation = NULL)
    {
        $this->__load();
        return parent::setOrganisation($organisation);
    }

    public function getOrganisation()
    {
        $this->__load();
        return parent::getOrganisation();
    }

    public function setUser(\Atemschutz\CoreBundle\Entity\User $user = NULL)
    {
        $this->__load();
        return parent::setUser($user);
    }

    public function getUser()
    {
        $this->__load();
        return parent::getUser();
    }

    public function addG26(\Atemschutz\NachweisBundle\Entity\G26 $g26s)
    {
        $this->__load();
        return parent::addG26($g26s);
    }

    public function removeG26(\Atemschutz\NachweisBundle\Entity\G26 $g26s)
    {
        $this->__load();
        return parent::removeG26($g26s);
    }

    public function getG26s()
    {
        $this->__load();
        return parent::getG26s();
    }

    public function addNachweise(\Atemschutz\NachweisBundle\Entity\Nachweis $nachweise)
    {
        $this->__load();
        return parent::addNachweise($nachweise);
    }

    public function removeNachweise(\Atemschutz\NachweisBundle\Entity\Nachweis $nachweise)
    {
        $this->__load();
        return parent::removeNachweise($nachweise);
    }

    public function getNachweise()
    {
        $this->__load();
        return parent::getNachweise();
    }

    public function __toString()
    {
        $this->__load();
        return parent::__toString();
    }

    public function getAts1Formatted($format = 'd.m.Y')
    {
        $this->__load();
        return parent::getAts1Formatted($format);
    }

    public function getAts2Formatted($format = 'd.m.Y')
    {
        $this->__load();
        return parent::getAts2Formatted($format);
    }

    public function getBirthdateFormatted($format = 'd.m.Y')
    {
        $this->__load();
        return parent::getBirthdateFormatted($format);
    }

    public function hasValidG26()
    {
        $this->__load();
        return parent::hasValidG26();
    }

    public function getLatestValidG26()
    {
        $this->__load();
        return parent::getLatestValidG26();
    }

    public function isOver18()
    {
        $this->__load();
        return parent::isOver18();
    }

    public function getLatestNachweisByNachweisart(\Atemschutz\NachweisBundle\Entity\Nachweisart $nachweisart)
    {
        $this->__load();
        return parent::getLatestNachweisByNachweisart($nachweisart);
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'id', 'firstname', 'lastname', 'birthdate', 'ats1', 'ats2', 'isActive', 'organisation', 'user', 'g26s', 'nachweise');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields as $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}